<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+文件名，这样就能够保证namespace的值是唯一的-->
<mapper namespace="mapping.userMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复使用
    	parameterType属性指明查询时使用的参数类型
    	resultType属性指明查询返回的结果集类型
    	resultType="mybatis.entity.User"就表示将查询结果封装成一个User类的对象返回
    	User类就是user表所对应的实体类
    -->
    
    <!-- 根据id查询得到一个user对象 -->
    <select id="getUser" parameterType="String" resultType="entity.User">
        SELECT * FROM user WHERE user_id=#{user_id}
    </select>
    
    <!-- 增加一个user记录 -->
    <insert id="addUser" parameterType="entity.User">
    	insert into user(user_id, user_name, user_password, user_pic) values(#{user_id}, #{user_name}, #{user_password}, #{user_pic})
    </insert>
    
    <!-- 修改密码 -->
    <select id="updatePassword" parameterType="entity.User">
    	update user set user_password=#{user_password} where user_id=#{user_id}
    </select>
    
    <!-- 修改name和头像 -->
    <update id="updateNameAndPic" parameterType="entity.User">
		update user set user_name=#{user_name}, user_pic=#{user_pic} where user_id=#{user_id}
    </update>
    
    <!-- 获取user_name -->
    <select id="getUserName" parameterType="java.lang.String" resultType="java.lang.String">
    	select user_name from user where user_id=#{user_id}
    </select>
    
    <!-- 获取user_pic -->
    <select id="getUserPic" parameterType="java.lang.String" resultType="java.lang.String">
    	select user_pic from user where user_id=#{user_id}
    </select>
</mapper>
